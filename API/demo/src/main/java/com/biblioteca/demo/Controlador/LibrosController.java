package com.biblioteca.demo.Controlador;

import com.biblioteca.demo.Entidad.libros;
import com.biblioteca.demo.Repositorio.I_LibroRepositorio;
import java.io.IOException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/libros") // This means URL's start with /demo (after Application path)
@CrossOrigin(origins = "*", methods= {RequestMethod.GET,RequestMethod.POST,RequestMethod.PUT,RequestMethod.DELETE})
public class LibrosController {
    @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private I_LibroRepositorio i_libroRepo;
    
  @GetMapping(path="/todos")
  public @ResponseBody Iterable<libros> getLibros() throws IOException{
    // This returns a JSON or XML with the users
    return i_libroRepo.findAll();
  }
  
  @GetMapping(path="/{id}")
  public @ResponseBody libros getLibro(@PathVariable("id") Integer id) throws IOException{
    // This returns a JSON or XML with the users
    return i_libroRepo.findById(id).orElse(null);
  }
  
  @PostMapping(path="/agregar") // Map ONLY POST Requests
  public @ResponseBody String createLibro (@RequestParam String nombre
      , @RequestParam String autor,@RequestParam Integer disponible) throws IOException{
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request   
    libros nuevo = new libros();
    nuevo.setNombre(nombre);
    nuevo.setAutor(autor);
    nuevo.setDisponible(disponible);
    i_libroRepo.save(nuevo);
    return "Libro guardado";
  }
  
  @PutMapping(path="/editar") // Map ONLY POST Requests
  public @ResponseBody String editLibro (@RequestBody libros libro) throws IOException{
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request   
    i_libroRepo.save(libro);
    return "Libro modificado";
  }
  
  @DeleteMapping(path="/eliminar/{id}")
  public @ResponseBody String deleteLibro(@PathVariable("id") Integer id) throws IOException{
      i_libroRepo.deleteById(id);
      return "Eliminado con exito";
  }

}
